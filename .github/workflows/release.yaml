name: Build and Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.output_step.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Save upload_url to file
        run: echo "${{ steps.create_release.outputs.upload_url }}" > upload_url.txt

      - name: Upload upload_url as artifact
        uses: actions/upload-artifact@v2
        with:
          name: upload_url
          path: upload_url.txt

  build_and_upload:
    name: Build and Release for ${{ matrix.platform }} ${{ matrix.goarch }}
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
            goarch: 'amd64'
            image: null
          - platform : darwin
            os: macos-latest
            image: null

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set version env
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        shell: bash

      - name: Set up dependencies on Linux
        if: matrix.platform == 'linux'
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y curl wget build-essential pkg-config libssl-dev zip
          sudo ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
          sudo dpkg-reconfigure --frontend noninteractive tzdata

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21'

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Add Rust target for macOS
        if: matrix.platform == 'darwin'
        run: rustup target add aarch64-apple-darwin

      - name: Build Rust bindings for linux and mac
        if: matrix.platform == 'linux'
        shell: bash
        run: |
          export OPENSSL_STATIC=1
          cd crypto/rust && cargo build --release
          cd ../..
          cd zk/rust && cargo build --release

      - name: Build Rust bindings for darwin
        if: matrix.platform == 'darwin'
        shell: bash
        run: |
          cd crypto/rust && cargo build --target aarch64-apple-darwin --release
          cd ../..
          cd zk/rust && cargo build --target aarch64-apple-darwin --release

      - name: Compile ilxd and ilxcli for ${{ matrix.platform }} ${{ matrix.goarch }}
        shell: bash
        run: |
          if [[ "${{ matrix.platform }}" == "linux" ]]; then
            go env
            export CGO_ENABLED=1
            go build -o bin/ilxd *.go
            cd cli && go build -o ../bin/ilxcli
          elif [[ "${{ matrix.platform }}" == "windows" ]]; then
            go env
            export CGO_ENABLED=1
            go build -ldflags="-r ./lib" -o bin/ilxd.exe *.go
            cd cli && go build -ldflags="-r ../lib" -o ../bin/ilxcli.exe
          elif [[ "${{ matrix.platform }}" == "darwin" ]]; then
            go env
            export CGO_ENABLED=1
            go build -o bin/ilxd *.go
            cd cli && go build -o ../bin/ilxcli
          else
            echo "Unsupported platform: ${{ matrix.platform }}"
            exit 1
          fi

      - name: Zip binaries for linux and mac
        if: matrix.platform == 'linux' || matrix.platform == 'darwin'
        shell: bash
        run: |
          zip ilxd-${{ env.VERSION }}-${{ matrix.platform }}_${{ matrix.goarch }}.zip bin/ilxd bin/ilxcli

      - name: Build Docker Image
        if: matrix.platform == 'linux'
        run: |
          docker build . -t projectillium/ilxd:${GITHUB_REF#refs/tags/}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image to Docker Hub
        run: |
          docker push projectillium/ilxd:${GITHUB_REF#refs/tags/}

      - name: Download upload_url artifact
        uses: actions/download-artifact@v2
        with:
          name: upload_url

      - name: Set upload_url from file
        shell: bash
        id: get_upload_url
        run: echo "::set-output name=upload_url::$(cat upload_url.txt)"

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: ./ilxd-${{ env.VERSION }}-${{ matrix.platform }}_${{ matrix.goarch }}.zip
          asset_name: ilxd-${{ env.VERSION }}-${{ matrix.platform }}_${{ matrix.goarch }}.zip
          asset_content_type: application/zip

